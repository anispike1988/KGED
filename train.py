import tensorflow as tf
import numpy as np
np.random.seed(1234)
import os
import time
import datetime
from builddata import *
from model import ConvKB
# Parameters
# ==================================================
#python train.py --embedding_dim 50 --embedding_des_dim 512 --num_filters 500 --learning_rate 0.0001 --name data --model_name ep200

os.environ["CUDA_DEVICE_ORDER"] = "PCI_BUS_ID"
os.environ["CUDA_VISIBLE_DEVICES"] = "0"

tf.flags.DEFINE_string("data", "/KGED/", "Data sources.")
tf.flags.DEFINE_string("run_folder", "/KGED/data/TRAINED_MODEL/", "Data sources.")
tf.flags.DEFINE_string("name", "data", "Name of the dataset.")

tf.flags.DEFINE_integer("embedding_dim", 50, "Dimensionality of character embedding")
tf.flags.DEFINE_integer("embedding_des_dim", 512, "Dimensionality of character embedding")
tf.flags.DEFINE_string("filter_sizes", "3,4,5", "Comma-separated filter sizes")
tf.flags.DEFINE_integer("num_filters", 500, "Number of filters per filter size")
tf.flags.DEFINE_float("dropout_keep_prob", 0.7, "Dropout keep probability")
tf.flags.DEFINE_float("l2_reg_lambda", 0.0001, "L2 regularization lambda")
tf.flags.DEFINE_float("learning_rate", 0.0001, "Learning rate")
tf.flags.DEFINE_boolean("is_trainable", True, "")
tf.flags.DEFINE_integer("batch_size", 128, "Batch Size")
tf.flags.DEFINE_float("neg_ratio", 1.0, "Number of negative triples generated by positive")
tf.flags.DEFINE_boolean("use_pretrained", True, "Using the pretrained embeddings")
tf.flags.DEFINE_integer("num_epochs", 201, "Number of training epochs")
tf.flags.DEFINE_integer("saveStep", 200, "")
tf.flags.DEFINE_boolean("allow_soft_placement", True, "Allow device soft device placement")
tf.flags.DEFINE_boolean("log_device_placement", False, "Log placement of ops on devices")
tf.flags.DEFINE_string("model_name", 'ep200', "")
tf.flags.DEFINE_boolean("useConstantInit", False, "")

FLAGS = tf.flags.FLAGS
FLAGS._parse_flags()
print("\nParameters:")
for attr, value in sorted(FLAGS.__flags.items()):
    print("{}={}".format(attr.upper(), value))
print("")

# Load data
print("Loading data...")

train, valid, test, words_indexes, indexes_words, \
    headTailSelector, entity2id, id2entity, relation2id, id2relation = build_data(path=FLAGS.data, name=FLAGS.name)

#print("train : " + str(train)) #wrong order from here
data_size = len(train)
train_batch = Batch_Loader(train, words_indexes, indexes_words, headTailSelector, \
                           entity2id, id2entity, relation2id, id2relation, batch_size=FLAGS.batch_size, neg_ratio=FLAGS.neg_ratio)

entity_array = np.array(list(train_batch.indexes_ents.keys()))

lstEmbed = []
lstEmbed_des = []
if FLAGS.use_pretrained == True:
    print("Using pre-trained model.")
    lstEmbed = np.empty([len(words_indexes), FLAGS.embedding_dim]).astype(np.float32)
    lstEmbed_des = np.empty([len(words_indexes), FLAGS.embedding_des_dim]).astype(np.float32)
    initEnt, initRel = init_norm_Vector(FLAGS.data + FLAGS.name + '/relation2vec' + str(FLAGS.embedding_dim) + '.init',
                                            FLAGS.data + FLAGS.name + '/entity2vec' + str(FLAGS.embedding_dim) + '.init', FLAGS.embedding_dim)
    initEnt_des, initRel_des = init_norm_Vector_des(FLAGS.data + FLAGS.name + '/relationdescription2vec' + str(FLAGS.embedding_des_dim) + '.init', FLAGS.data + FLAGS.name + '/entitydescription2vec' + str(FLAGS.embedding_des_dim) + '.init', FLAGS.embedding_des_dim)                                            
    
    for _word in words_indexes:
        if _word in relation2id:
            index = relation2id[_word]
            _ind = words_indexes[_word]
            lstEmbed[_ind] = initRel[index]

        elif _word in entity2id:
            index = entity2id[_word]
            _ind = words_indexes[_word]
            lstEmbed[_ind] = initEnt[index]

        else:
            print(" Error !!! : " + _word)
            print('*****************Error********************!')
            break

    for _word in words_indexes:
        if _word in relation2id:
            index = relation2id[_word]
            _ind = words_indexes[_word]
            lstEmbed_des[_ind] = initRel_des[index]
        elif _word in entity2id:
            index = entity2id[_word]
            _ind = words_indexes[_word]
            lstEmbed_des[_ind] = initEnt_des[index]
        else:
            print('*****************Error********************!')
            break

    lstEmbed = np.array(lstEmbed, dtype=np.float32)
    lstEmbed_des = np.array(lstEmbed_des, dtype=np.float32)


print("len(words_indexes) : " + str(len(words_indexes)))
print("len(entity2id) : " + str(len(entity2id)))
print("len(relation2id) : " + str(len(relation2id)))

#assert len(words_indexes) % (len(entity2id) + len(relation2id)) == 0

print("Loading data... finished!")

x_valid = np.array(list(valid.keys())).astype(np.int32)
y_valid = np.array(list(valid.values())).astype(np.float32)

x_test = np.array(list(test.keys())).astype(np.int32)
y_test = np.array(list(test.values())).astype(np.float32)

# Training
# ==================================================
with tf.Graph().as_default():
    tf.set_random_seed(1234)
    session_conf = tf.ConfigProto(allow_soft_placement=FLAGS.allow_soft_placement, log_device_placement=FLAGS.log_device_placement)
    session_conf.gpu_options.per_process_gpu_memory_fraction = 1.0
    #session_conf.gpu_options.allow_growth = True
    sess = tf.Session(config=session_conf)
    with sess.as_default():
        global_step = tf.Variable(0, name="global_step", trainable=False)

        print("Convolutional layer in \n")

        cnn = ConvKB(
            sequence_length=x_valid.shape[1], #3
            num_classes=y_valid.shape[1], #1
            pre_trained=lstEmbed,
            pre_trained_des=lstEmbed_des,
            embedding_size=FLAGS.embedding_dim,
            embedding_des_size=FLAGS.embedding_des_dim,
            filter_sizes=list(map(int, FLAGS.filter_sizes.split(","))),
            num_filters=FLAGS.num_filters,
            vocab_size=len(words_indexes),
            l2_reg_lambda=FLAGS.l2_reg_lambda,
            batch_size=(int(FLAGS.neg_ratio) + 1)*FLAGS.batch_size,
            is_trainable=FLAGS.is_trainable,
            useConstantInit=FLAGS.useConstantInit)

        # Define Training procedure
        #optimizer = tf.contrib.opt.NadamOptimizer(1e-3)
        optimizer = tf.train.AdamOptimizer(learning_rate=FLAGS.learning_rate)
        #optimizer = tf.train.RMSPropOptimizer(learning_rate=FLAGS.learning_rate)
        #optimizer = tf.train.GradientDescentOptimizer(learning_rate=FLAGS.learning_rate)
        grads_and_vars = optimizer.compute_gradients(cnn.loss)
        train_op = optimizer.apply_gradients(grads_and_vars, global_step=global_step)
   
        out_dir = os.path.abspath(os.path.join(FLAGS.run_folder, "runs", FLAGS.model_name))
        print("Writing to {}\n".format(out_dir))

        checkpoint_dir = os.path.abspath(os.path.join(out_dir, "checkpoints"))
        checkpoint_prefix = os.path.join(checkpoint_dir, "model")
        if not os.path.exists(checkpoint_dir):
            os.makedirs(checkpoint_dir)


        sess.run(tf.global_variables_initializer())

        def train_step(x_batch, y_batch):
            """
            A single training step
            """
            feed_dict = {
              cnn.input_x: x_batch,
              cnn.input_y: y_batch,
              cnn.dropout_keep_prob: FLAGS.dropout_keep_prob,
            }
            _, step, loss = sess.run([train_op, global_step, cnn.loss], feed_dict)
                  
        #Predict function to predict scores for test data
        def predict(x_batch, y_batch, writer=None):
            feed_dict = {
              cnn.input_x: x_batch,
              cnn.input_y: y_batch,
              cnn.dropout_keep_prob: 1.0,
            }
            step, scores, _ = sess.run([global_step, cnn.predictions, cnn.loss], feed_dict)
            
            return scores
        #

        num_batches_per_epoch = int((data_size - 1) / FLAGS.batch_size) + 1

        for epoch in range(FLAGS.num_epochs):
            print("epoch : " + str(epoch))
            for batch_num in range(num_batches_per_epoch): #num_batches_per_epoch = 679  => train_triplets_num / 128
                x_batch, y_batch = train_batch()
                train_step(x_batch, y_batch)
                current_step = tf.train.global_step(sess, global_step)

            if epoch > 0:
                if epoch % FLAGS.saveStep == 0:
                    path = cnn.saver.save(sess, checkpoint_prefix, global_step=epoch)
                    print("Saved model checkpoint to {}\n".format(path))

